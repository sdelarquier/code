import tsyganenko as ts
import numpy as np
from datetime import datetime
import sys
sys.path.append('/davitpy')
from pydarn.plot import overlayFov
from mpl_toolkits.basemap import Basemap
import pylab



def trace(date=None, fig=True):
    """
Trace RBSP footprints for a given date (python datetime object)
of for all the available dates 
    """
    # Read the data
    year, month, day, hour, minute, second, altA, latA, lonA = np.genfromtxt('orbitposA.dat', unpack=True, skiprows=1)
    dates = []
    for y,m,d,h,mn,s in zip(year, month, day, hour, minute, second):
        dates.append( datetime( int(y),int(m),int(d),int(h),int(mn),int(s) ) )
    datesA = np.array(dates)

    year, month, day, hour, minute, second, altB, latB, lonB = np.genfromtxt('orbitposB.dat', unpack=True, skiprows=1)
    dates = []
    for y,m,d,h,mn,s in zip(year, month, day, hour, minute, second):
        dates.append( datetime( int(y),int(m),int(d),int(h),int(mn),int(s) ) )
    datesB = np.array(dates)

    # Ganerate day-by-day array
    if not date:
        datesAll = np.concatenate((datesA, datesB))
        un, inds = np.unique( [d.strftime('%Y%m%d') for d in datesAll], return_index=True )
        dateIn = datesAll[inds]
    else:
        dateIn = [date]

    # Generate traces day-by-day
    for day in dateIn:
        print day.strftime('%Y-%b-%d')
        # First A
        inds = [d.date()==day.date() for d in datesA]
        sdates = datesA[np.array(inds)]
        if len(sdates) >= 1:
            # trace points
            lats = latA[np.array(inds)]
            lons = lonA[np.array(inds)]
            rhos = altA[np.array(inds)]
            traceA = ts.tsygTrace(lats, lons, rhos, datetime=sdates)
            # Save traces
            traceA.save( 'trace.{}.A.dat'.format(day.strftime('%Y%m%d')) )

        # Then B
        inds = [d.date()==day.date() for d in datesB]
        sdates = datesB[np.array(inds)]
        if len(sdates) >= 1:
        # trace points
            lats = latB[np.array(inds)]
            lons = lonB[np.array(inds)]
            rhos = altB[np.array(inds)]
            traceB = ts.tsygTrace(lats, lons, rhos, datetime=sdates)
            # Save traces
            traceB.save( 'trace.{}.B.dat'.format(day.strftime('%Y%m%d')) )

    if fig: plot(traceA=traceA, traceB=traceB)


def plot(date=None, traceA=None, traceB=None):
    """
Plot RBSP footprints
    """
    assert not date==None or not (traceA==None and traceB==None), 'Either give a date, or a trace for A and B'

    # Read trace
    if not traceA:
        traceA = ts.tsygTrace(filename='trace.{}.A.dat'.format(date.strftime('%Y%m%d')))
    if not traceB:
        traceB = ts.tsygTrace(filename='trace.{}.B.dat'.format(date.strftime('%Y%m%d')))
    if not date:
        date = traceA.datetime[0]

    # Init figure
    fig = pylab.figure(figsize=(11,8.5))
    pylab.rcParams.update({'font.size': 14})
    fovCol = (.5,.6,.6)
    fovAlpha = .2

    # NH
    ax1 = fig.add_subplot(121)
    m1 = Basemap(projection='npstere',boundinglat=35,lon_0=270,resolution='l')
    m1.drawcoastlines()
    m1.fillcontinents(color=(.8,.8,.8))
    # draw parallels and meridians.
    m1.drawparallels(np.arange(-80.,81.,20.))
    m1.drawmeridians(np.arange(-180.,181.,20.))
    m1.drawmapboundary()
    # Draw FP
    x, y = m1(traceA.lonNH, traceA.latNH)
    m1.scatter(x, y, color='r', zorder=4, s=5)
    x, y = m1(traceB.lonNH, traceA.latNH)
    m1.scatter(x, y, color='b', zorder=4, s=5)
    overlayFov(m1, all=True, hemi='north', maxGate=75, dateTime=traceA.datetime[0], 
        fovColor=fovCol, lineColor=fovCol, lineWidth=0, fovAlpha=fovAlpha)

    # Add time markers
    step = 50
    for lon, lat, time in zip(traceA.lonNH[0::step], traceA.latNH[0::step], traceA.datetime[0::step]):
        x, y = m1(lon, lat)
        ax1.text(x, y, time.strftime('%H:%M'), zorder=5, clip_on=True, color=(.3,0,0), fontsize=10, ha='left')
    for lon, lat, time in zip(traceB.lonNH[0::step], traceB.latNH[0::step], traceB.datetime[0::step]):
        x, y = m1(lon, lat)
        ax1.text(x, y, time.strftime('%H:%M'), zorder=5, clip_on=True, color=(0,0,.3), fontsize=10, ha='right')

    # SH
    ax2 = fig.add_subplot(122)
    m2 = Basemap(projection='spstere',boundinglat=-35,lon_0=270,resolution='l')
    m2.drawcoastlines()
    m2.fillcontinents(color=(.8,.8,.8))
    # draw parallels and meridians.
    m2.drawparallels(np.arange(-80.,81.,20.))
    m2.drawmeridians(np.arange(-180.,181.,20.))
    m2.drawmapboundary()
    # Draw FP
    x, y = m2(traceA.lonSH, traceA.latSH)
    m2.scatter(x, y, color='r', zorder=4, s=5)
    x, y = m2(traceB.lonSH, traceA.latSH)
    m2.scatter(x, y, color='b', zorder=4, s=5)
    overlayFov(m2, all=True, hemi='south', maxGate=75, dateTime=traceA.datetime[0],
        fovColor=fovCol, lineColor=fovCol, lineWidth=0, fovAlpha=fovAlpha)

    # Add time markers
    step = 50
    for lon, lat, time in zip(traceA.lonSH[0::step], traceA.latSH[0::step], traceA.datetime[0::step]):
        x, y = m2(lon, lat)
        ax2.text(x, y, time.strftime('%H:%M'), zorder=3, clip_on=True, color=(.3,0,0), fontsize=10, ha='left')
    for lon, lat, time in zip(traceB.lonSH[0::step], traceB.latSH[0::step], traceB.datetime[0::step]):
        x, y = m2(lon, lat)
        ax2.text(x, y, time.strftime('%H:%M'), zorder=3, clip_on=True, color=(0,0,.3), fontsize=10, ha='right')

    fig.tight_layout()

    Title = '{}'.format(date.strftime('%Y - %b - %d'))
    fig.text(.02, .82, Title)
    fig.text(.02, .19, 'RBSP-A', color='r', va='top')
    fig.text(.1, .19, 'RBSP-B', color='b', va='top')

    fig.savefig( 'rbsp.map.{}.pdf'.format(date.strftime('%Y%m%d')) )


if __name__ == '__main__':
    import sys

    if len(sys.argv)==2: 
        date = datetime(int(sys.argv[1][0:4]),
                        int(sys.argv[1][4:6]),
                        int(sys.argv[1][6:8]))
    else: date = None

    #trace(date=date)
    plot(date=date)
